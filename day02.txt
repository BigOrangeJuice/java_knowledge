java_day02

1.标识符

	—— 使用范围：类名，方法名，接口名，变量名，常量名

	—— 命名规则：* 只能由“数字，字母，下划线_，美元符合$”组成

		     * 不能由数字开头，也不能用关键字作标识符

		     * 哈哈哈，，，，学烂了-。-

	—— 命名规范：* 要间名知义

		     * 驼峰命名法：

		     	* 类名、接口名：首字母大写，后面每个单词首字母都大写

			* 变量名、方法名：首字母小写，后面每个单词首字母都大写

			* 常量名：全部大写

	——由于java语言采用的是Unicode编码方式，则标识符可以用中文或其他语言而不报错

2.关键字(50个)：

	* 访问控制修饰符(3)：public、protected、private

	* 类、方法和变量修饰符(6)：class、interface(接口)、abstract(声明抽象)、implements(实现)、extends(继承)、new(创建新对象)

	* 修饰方法、类、属性、变量(9)：static、final(不可更改的)、super(调用父类)、this(引用当前实例)、native、strictfp、

					synchronize(线程，同步)、transient(短暂)、volatile(易失)

	* 程序控制语句(12)：if、else、while、do、for、switch、case、default、break、continue、return、instanceof(实例)

	* 错误处理(5)：catch(处理异常)、try(捕获异常)、finally(异常与否都会执行)、throw(抛出一个异常对象)、throws(声明异常)

	* 包(2)：import(引入包内关键字，ctrl+shift+o)、package(定义包内关键字)

	* 数据类型(10)：byte(8bit)、boolean、char(16bit)、int(32bit)、long(64bit)、float(32bit)、double(32bit)、void、enum

	* 其他：assert(断言)

	* 标志符(3)：null、true、false

	—— 除此以外，还有两个保留字：goto(没有用)，const(类似final)

3.字面值：

	—— 123,100		—— 整数型字面值
	—— 3.14,1.121212	—— 浮点型字面值
	—— 'a','0'		—— 字符型字面值
	—— "abc","asd123"	—— 字符串型字面值
	—— true,false		—— 布尔型字面值

	* 重复访问同一个字面值，并非同一个地址

4.变量：

	—— 组成：数据类型，名称，字面值

	—— 变量是内存中存放数据的最基本的单元

	—— 变量中存储的具体"数据"必须和变量的数据类型一致

	—— 定义变量：数据类型 变量名 = 字面值 ;

	—— 在同一个作用域内，变量不能重名

	—— 分类：

		* 局部变量：在方法体内部声明的变量

		* 成员变量：在方法体外【类体之内】声明的变量

		* 通过static修饰的局部变量，生命周期可由局部作用域延伸为成员作用域，即其他方法体也可调用该变量

	—— 成员变量光声明不赋值，系统会自动赋值【0】，当然，前提是用static修饰

	—— 而局部变量则不会,因为static无法修饰局部变量

	  【因为class生效以后，static定义的变量也随机生效，是同时的，但局部变量做不到这一点，它还需要通过方法体这一步】

5.作用域：使用变量的有效范围

6.生命周期：一个变量的定义到变量的销毁的这个时间段

7.实践：

	*在代码实现过程中发现，不论是变量还是方法，要想被其他方法调用，必须要设置为static静态的，或者说，不这样设置，会直接报错

	*即使是在方法体外定义变量使他成为成员变量也要加static静态，否则会报错【静态无法使用非静态】

8.基本数据类型：
	
	* 四大类八小种：(占用字节数)						默认值

		第一类：整型	byte(1)、short(2)、int(4)、long(8)		  0

		第二类：浮点型	float(4)、double(8)				 0.0

		第三类：字符型	char(2)						\u0000(u代表Unicode，\u0000代表十六进制的数对应的字符)

		第四类：布尔型	boolean(1)					false

		**字符串不属于基本数据类型，而是属于引用数据类型

		—— char：

			* 一个中文占2字节，而char类型正好是2字节，因此一个中文也算一个字符

9.类型转换：

	* 八中基本数据类型，除了布尔类型，其他的都可互相转化

	!* 由于布尔类型不能与其他类型发生转换，因此布尔里的true不能用1表示，false也不能用0表示(该点与C语言里的知识点有出入)

	* 小容量向大容量转换，称为自动类型转换

		byte < char = short < int < long < float < double

	* 任意浮点型数据都比整型数据的容量大

	* 大容量向小容量转换，称为强制类型转换，在运行阶段也会发生精度损失

		*操作：(数据类型)变量名

	* byte i = 50 ;		该语句理解为将一个int类型的字面值赋值给了一个byte类型变量，由于java语言的内部机制，
				只要没有超出byte的数值范围便可直接赋值

10.运算符:

	* %：在java中，%不限于整数直接的运算，浮点数同样可以

	* +：除了进行加法运算，还可以进行字符串的连接运算(类似于python)

		* 注意：只能进行字符串的连接，不能进行字符之间的连接

11.输入输出：

	* 输出：负责向控制台输出
		System.out.println() ;

	* 输入：步骤

		1>创建键盘扫描器对象
		java.util.Scanner s = new java.util.Scanner(System.in) ;

		2>调用Scanner对象的next()方法开始接收用户键盘输入

		当用户输入时，并且最终桥下回车键后，输入的信息会自动赋值给userInputContent (只是为了间名知义，可以是其他的标识符)

		程序执行到这里，用户输入的信息已经存放到内存中

		String userInputContent = s.next() ;

		若是int类型：int num = s.nextInt() ;【并非因为间名知义，而是规定，next是给与字符串，而nextInt是给与整型数值】

	* java里没有nextChar() ;

	* s.next().charAt(0)——取得第一个字符，因为没有nextChar()，可以通过这种方法给字符输入赋值

			或写成s.next().toCharArray()[0]【两者含义不相同，前者是返回字符，后者是将字符串转为字符数组再返回对应索引出的字符】

		* 字符数组.charAt(下标)：用于确定一个字符串的第(下标+1)个字符

	***** s.nextLine() : 重要功能。用于一行连续输入且中间有空格间隔【普通next会被空格截断】
