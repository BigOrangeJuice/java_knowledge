java_day03

1.定义变量：随时随地，随处可行，但切记：内层变量不得与外层变量重名

2.方法：

	—— 与c语言的函数知识点极度相似，略微有所不同【方法重载这一点，类似于c++里的函数重载】

	—— 且由于方法是写在类内的，因此在同一个源文件中，一个类写好了某个方法，其他类若想调用，只需在所需方法前加上对应类前缀即可

	—— 若是在本类内使用，则无需加前缀【当然，为了规范性是需要加的，但可以省略】

	—— 同函数一样，方法体内不能再定义方法

	* 语法结构(普通构造方法)：

		[修饰符列表] 返回值类型 方法名(形式参数列表)
		{
			方法体 ;
		}

		Ⅰ修饰符列表：
			
			* 可选项，可以不写

			* 目前统一写成：public static

			* 方法的修饰符列表当中有static的调用方法：
				
				类名.方法名(实际参数列表) ;

		Ⅱ返回值类型：

			* 返回值：一个方法在结束时往往需要返回一个最终执行结果【也可能为空，void】，而这个结果可能是个具体数据，这个具体数据便是返回值

			* 返回值类型：基本数据类型和引用数据类型均可

			* 不是void还无返回值，会报错

			* 当方法的返回值在if中，可能报错，因为if的布尔表达式可真可假，因此可能得到return也可能得不到return，而返回值必须要100%的得到

		Ⅲ形式参数列表：简称形参

			* 数量：要与实参一样多

			* 类型：要与实参相同；传参过程可进行类型转换(自动或强制均可)
	
	—— 方法只定义，不调用，是不会执行的，并且在JVM中也不会给该方法分配运行所属的内存空间

3.内容空间：

	*主要的三大内存空间：方法区内存，栈区内存(stack)，堆区内存

		* 栈负责存放局部变量，堆负责存放new出来的对象

		* 方法区内存负责存放代码片段(需要时调出)和静态变量
		
		* 堆区负责存放实例变量

		* 栈/stack：单出口，因此先来后出，后来先出

			—— 最先进入的在最底部(最内部)，因此是栈底元素；而最后进入的在最顶部(最外部),因此是栈顶元素

			—— 栈帧，永远指向栈顶元素

			—— 栈顶元素处于活跃状态，其他元素静止

			—— 行为：压栈/入栈/push，弹栈/出栈/pop

				* return 便是弹栈

				--->最先调用的方法最后释放(一般都是main方法)，最后调用的方法最先释放/结束

	* 方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其放到了方法区。所以JVM中的方法区最先有数据

	* 方法区中的代码片段虽然只有一份，但可以被重复调用；在每次调用时，都需要给该方法在栈区分配独立的活动场所

4.方法重载(overload)：

	* 适用条件：1>功能相似不相同的方法体之间

		    2>必须在同一个类中

	* 满足条件：
			
		1>同一个类中

		2>方法名相同

		3>参数列表不同：数量不同、类型不同、顺序不同

	* 返回值类型不同无法触发

	* main方法也可以重载

5.方法递归：自己调用自己

	* 一旦触发，就会分配一块新的内存空间

	* 容易发生栈内存溢出，可能因为没有条件，或递归过深

	* 极耗栈区内存，除了对部分题有奇效外，能别用尽量别用
