java_day05
2021/7/20

1.数组：

	* java中的数组属于引用数据类型，因此数组对象是存放在堆区的

	* 数组在查询/查找/检索某个下标的元素效率极高，因为它并非一个一个寻找，而是算出一个内存地址，然后直接定位

	！* 在定义数组时，元素个数可以用非字面值表示(不同于C)

	一维数组：

		* 动态数组：指定长度
			
			—— 标准初始化格式： 数据类型[] 数组名称 = new 数据类型[长度] ;

				* 两边的数据类型必须相同

				拆分版： 1> 数组类型[] 数组名称 ;
					
					 2> 数组名称 = new 数据类型[长度]  ;

		* 静态数组：指定内容

			—— 标准初始化格式： 数组类型[] 数组名称 = new 数据类型[] {元素1,元素2,......} ;

				省略版： 数组类型[] 数组名称 = {元素1,元素2,......} ;

				拆分版： 1> 数组类型[] 数组名称 ;
					
					 2> 数组名称 = new 数据类型[] {元素1,元素2,......} ;

				* 静态数组一旦使用省略版便不能拆分开来写

		—— 但不论是动态还是静态，在java中数组的长度都是不可变的

		* 不确定数组内容时，建议使用动态数组

		* 直接打印数组名称，得到的是数组对应的：数组地址哈希值

		* 访问数组元素：

			—— 格式：数组名称[索引值]【此处便可以类比C语言的数组】

		* 遍历数组的两种方法：
	
		1> for(int i = 0;i < array.length();++ i){
			System.out.println(array[i]) ;
		   }
		2> for(int i:array){
			System.out.println(i) ;
		   }

	二维数组：array[][]

		* java中的二维数组才是真正的二维数组【其有维度】
			
			至于为什么呢？看看二者的区别：

				C语言：他是将很多一维数组连成一体存在栈区，实际上他们的维度没有发生改变，大家都在同一层

				java：他是在栈区弄出第一层维度，是用来存放下一各个数组维度的维度代称，接下来每一个维度代称指向

				      其所代表的第二层维度【这就来到了堆区】，而第二层维度他们是许多划分开的一维数组，每个一维

				      数组的长度可能不一

				     【而数组需要确定长度，这也就解释了为什么java二维数组里必须指定行标，因为他要确定二维数组里

				      到底要细分成几个一维数组，至于一维数组里又要存放几个元素，那就是接下来要考虑的事了】

		int[][] array = new int[二维长度][一维长度] ;
		
		* 第一个中括号代表的是数组的下标，第二个中括号代表的是数组中元素的下标

		* 针对动态数组格式：由于必须指定数组长度，而二维数组是一个一维数组的集合，因此他必须规定他的二维长度,而非一维长度

		  (此点与C语言的"必须规定列标"有较大出入)

		* 使用二维数组.length,求得是二维长度，也就是一维数组的个数(而C语言里的测长是所有元素个数)

		* 二维数组作参数：
		
			形式：数据类型[][] 数组名

			传参：1>直接传递数组变量

			      2>通过new一个静态数组也可以

	* 测量长度：.length用于数组长度

		    .length()用于字符串长度

		    .size()用于泛型数组
