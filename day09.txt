java_day09
2021/7/24

1.多态：

	* 在进行转型时，两个类之间必须有继承关系【即使两个是子类继承同一个父类也不行，虽然这样在编译阶段没有语法错误，但在运行阶段会出错】

	* 向上转型(upcasting)：

		—— 子类转换成父类，暂可理解成自动类型转换

	* java程序永远都分编译阶段和运行阶段

		1>先分析编译阶段，再分析运行阶段，编译无法通过，根本无法运行

		2>对于 Animal cat = new Cat() ;这个语句，Animal是父类，Cat是子类

		  编译阶段：编译器检查cat这个引用的数据类型是Animal，由于Animal.class字节码中有move方法，所以编译通过

		  这个过程叫做静态绑定

		3>运行阶段：JVM堆内存当中真实创建的对象是Cat对象，那么以下程序在运行阶段是会调用Cat对象的move方法

		  这个过程叫做动态绑定

		4>无论Cat对象有没有重写move方法，运行阶段调用的一定是Cat对象的move方法，因为底层真实对象是Cat

		5>多态语法机制：父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态

	* 向下转型(downcasting)：

		—— 父类转换成子类，咱可理解成强制类型转换【需要加类型转换符】

	* 向下转型使用条件：当调用的方法是子类中特有的，在父类中不存在时，必须进行向下转型

		1>继上面代码,由于Animal父类中没有catchMouse这一方法，所有必须转为Cat类才可调用CatchMouse方法

		2>Cat c = (Cat) cat ; c.catchMouse() ; 正确

		3>Animal父类、Bird和Cat两个不相干的俩子类

			Animal a = new Bird() ;

			Cat b = (Cat) a ;

			* 编译阶段没有问题，因为编译器检查到a的数据类型是Animal

			  Animal和Cat之间有继承关系，并且Animal父Cat子，向下转型，语法合格

			* 运行阶段出错，JVM堆内存当中真实存在的对象是Bird类，Bird类无法转为Cat类，因为两者无继承关系

				出现著名异常：java.lang.ClassCastException

					类型转换异常，总会出现在“向下转型”

	* 向上转型只要编译阶段不出错就可以运行；向下转型编译无误，运行也可能出错

		—— 避免ClassCastException：使用instanceof运算符

			* 语法结构：引用 instanceof 数据类型	EG: a instanceof Animal

			* 返回值是布尔类型，true/false

				true代表：a这个引用指向的对象是一个Animal类

				false代表：a这个引用指向的对象不是一个Animla类

			* 为了java语法规范，建议强制类型转换之前，使用instanceof运算符判断【针对的是引用数据类型】

	* 作用：高扩展，低耦合【面向抽象编程】

2.final：

	* final修饰的类无法被继承

	* final修饰的方法无法被覆盖

	* fianl修饰的数组无法指向新地址

	* final修饰的变量一经赋值后不可重新赋值【类似于C语言里的const】

	* final修饰的实例变量：

		实例变量有默认值，final修饰的变量一经赋值不可二次赋值。综合考虑，sun公司决定final修饰实例变量时必须初始化

		—— 一般与static联合使用，受变量常量化

			* 定义常量语法格式：public static final 数据类型 常量名 = 字面值 ;

	* final修饰的引用：一旦指向某个对象，不得再次指向其他对象，被指向的对象无法被垃圾回收器回收

		—— 但其指向的对象内部的内容可以被修改

3.package(包)：方便程序的管理

	* 定义方法：在源程序最开头定义，且只能定义一个package

		package 包名 ;

	* 包名命名规范：公司域名倒序 + 项目名 + 模块名 + 功能名 ;

		避免重名

		全部小写

	* eg：package com.node.javase.day09 ;

		使用dos命令窗口运行java程序时，编译规范不变，运行要改

			—— 编译：javac java源文件路径

			—— 运行：先手动创建目录，再java 包名.类名

4.import(导入)：

	* 用于导入其他类，同一个包下的类不需要导入，不在同一个包下需要手动导入

	* 语法格式：import 类名 ;

		    import 包名.* ;	//*表示导入对应包名下的所有类

	* 定义位置：package之下，class之上

	* java.lang.* 语言包是java的核心包，不需要手动导入

	* Date类等其他类需要手动导入

5.访问控制权限修饰符：

	* 访问控制权限修饰符来控制元素的访问范围
	
	* 包括：

		public				公开的，任何位置均可访问

		protected			受保护的，同类、同包、子类均可访问

		缺省【前面啥都不加】		同类、同包可访问

		private				仅在当前类下可使用

		范围：public > protected > 缺省 > private

	* 可以修饰变量、方法、类。。。

		—— 类只能通过public或缺省来修饰【内部类除外】

