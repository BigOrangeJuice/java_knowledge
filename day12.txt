java_day12
2021/7/27

1.抽象类：

	—— 概念：类和类之间有共同特征，将这些具有共同特征的类再进一步抽象形成抽象类

	—— 数据类型：引用数据类型

	—— 定义：

		语法：[修饰符列表] abstract class 类名{
			类体 ;
		}

	—— 对象是实际存在的，而类是现实中不存在的

	—— 抽象类---->（抽象类---->）类---->对象

	—— 抽象类无法实例化【即无法创建对象】，所以抽象类是用来被继承的

		* 抽象类有构造方法，提供给子类使用

			>抽象类的子类可以是非抽象类

		* 反过来说，抽象类与抽象类还可以组成抽象类

	—— abstract和final不能联合使用【非法的修饰符组合】

	—— 抽象方法：

		* 概念：表示没有实现的方法，没有方法体的方法eg：public abstract void test() ;

		* 特点：1>没有方法体，以分号结尾

			2>修饰符列表有abstract

	—— 抽象类中不一定有抽象方法，但抽象方法一定出现在抽象类中

		* 抽象类中也可以有非抽象方法

	—— 抽象类可以继承实体类【实体类即是非抽象类】

	—— 一个非抽象的类继承抽象类，必须将抽象类中的抽象方法实现，否则会报错

		* 解决：将抽象方法“实现”【即重写/覆盖】，把abstract去掉加上方法体

	—— 可以使用多态机制，由非抽象类向上转型为抽象类

2.接口：

	—— 接口不能new对象【因为接口是抽象的，无法实例化】

	—— 数据类型：也是一种引用数据类型

	—— 接口是完全抽象的,或者说接口是特殊的抽象类

	—— 语法：[修饰符列表] interface 接口名{}

	—— 一个接口支持多继承【接口之间的继承仍然用extends

	—— 包括内容：一常量、二抽象方法，其余没有

		* 接口内的东西都是public的，因此public可以省略

		* 由于接口内的方法都是抽象的，因此abstract可以省略
		
		* 由于常量的定义格式是public static final 数据类型 变量名 ，public static final 可以省略
		
		* 抽象方法无方法体

3.类与接口：

	* 类和类之间是继承(类似于父子)，类和接口之间是实现(类似于亲戚)【换了个说法而已】

	* 继承使用extends，而实现使用implements

	* 非抽象类实现接口时，必须将接口中的所有抽象方法都实现
	
	* 一个类同样可以实现多个接口

	* 接口和接口之间进行强制类型转换，即使没有继承关系也可以进行

		但有可能出现ClassCastException异常【被同一个类实现的两个接口强转时编译和运行都没问题，两个被不同类实现或没有被实现的两接口强转会报错

	* 一个子类要同时继承父类和实现接口，extends在前implements在后

	* 类与接口之间发生强转时，两者之间不需要有继承关系

4.接口在开发中的应用：

	** 类似于多态的作业：面向抽象编程而非面向具体编程，低耦合高扩展

	* 接口进行解耦合，解的是调用者和实现者的耦合，这样即便删掉其中一项，只要接口还在，另一项也不会收到影响

	* 将项目切割为各个模块，分开来开发，加快开发效率，最后用接口衔接

5.is a、has a、like a：

	* Cat is a Animal：继承关系

	* I have a Pen：关联关系【属性】

	* Cook like a Menu：实现关系【类实现接口】

6.抽象类和接口：

	* 抽象类是半抽象的，接口是完全抽象的

	* 抽象类中有构造方法，接口中没有构造方法

	* 接口之间可多继承，类之间只能单继承

	* 一个类可继承多个接口，一个抽象类只能继承一个类

	* 接口中只有常量和抽象方法
