java_day17
2021/8/3

1.异常:

	* 定义:程序执行过程中出现的不正常情况

	* 作用:增强程序的健壮性

	* 异常信息是由JVM打印的

	* 异常在java中以类的形式存在。每一个异常都可以实例化异常对象

	* 异常的继承结构：

		Object
		Object下有Throwable(可抛出的)
		Throwable有两个分支：Error(不可处理，直接退出JVM)和Exception(可处理的)
		Exception有两个分支：Exception的直接子类：编译时异常【受检异常/受控异常】(要求程序员在编写阶段必须预先对这些异常进行处理，否则编译器报错)
				     RuntimeException：运行时异常【非受检异常/非受控异常】(可以不处理)

				     —— 编译时异常和运行时异常，都是发生在运行阶段，因为只有运行阶段才能new对象【而异常正是类与对象】

				     —— 编译时异常必须在编译(编写)阶段预先处理，如果不处理编译器报错

				     —— 编译时异常发生概率较高
				     
				     —— 运行时异常发生概率较低

				     —— 上抛类似于推卸责任，捕捉类似于自己解决

	* java对异常的处理方式：

		第一种：在方法声明的位置上，使用throws关键字,抛给上一级【异常上抛/抛出异常】，throws 对应的异常【可以是它的父类】

			—— 可多抛，用逗号隔开

			注意：如果发生异常持续上抛，最终抛给了main方法，main方法继续上抛，抛给了调用者JVM，JVM只会终止程序的执行

			—— 一般不建议在main方法声明处抛出异常，以为这个异常发生后一定会抛给JVM，而JVM只会终止程序【一般用捕捉异常】

		第二种：使用try...catch语句进行捕捉【异常捕捉/捕获异常】

			—— 语法格式：try{
					//进行尝试
					}catch(具体的异常【也可以是异常的父类】 引用名){
					//对应语句尝试无果后走的分支
					}catch(具体的异常【也可以是异常的父类】 引用名){
					//对应语句尝试无果后走的分支
					}
					......

			—— catch可多个并写，也可以用‘|’按位或运算符写到一个catch里，建议写得精确，针对某个异常就捕捉某个异常

				catch(异常|异常|异常 引用名)

			—— catch书写必须遵循“从小到大”原则

		选择：如果希望调用者来处理，使用throws上报

	* 打印异常堆栈信息:引用.printStackTrace() 

		java 后台打印异常堆栈追踪信息的时候,采用了异步线程的方式打印【暂不了解，只知道与普通的输出是不同的输出方式，不一定谁前谁后】

		—— 从上往下看

	* 获取异常简单描述信息,返回字符串:引用.getMessage()

		默认值是null,可以在创建对象时给异常对象赋值

	* 注意：异常抛出后，后面的程序代码不再执行

2.finally语句

	* 语句格式：try{
			
			}catch(){

			}finally{

			}

	* 作用：通常用于完成资源的释放/关闭

	* 流使用完毕必须要关闭，因为占用资源，在try...catch中关闭流，用放在finally中更为保险

	* 可以try和finally搭配使用而不使用catch，但try不能单独使用

	* 执行顺序：先执行try，再执行finally，最后执行return

3.自定义异常:

	1>编写一个类继承Exception或者RuntimeException

	2>提供两个构造方法,一个无参的,一个带有String参数的

4.throw:手动抛出异常

	* 作用：当程序出现某种逻辑错误时由程序员主动抛出某种特定类型的异常

	* 用法:创建对象
		
		throw 引用

		或者合并,之间 throw new 异常类()

	注意：运行时异常可直接这样编写

		但对于编译时异常，使用throw关键字主动抛出检测性异常的时候，在方法名上必须使用throws表明调用这个方法可能存在要抛出的异常

5.常见异常：

	* 编译时异常：

		—— ClassNotFoundException：应用程序试图加载类时，找不到相应的类，抛出该异常
		—— IllegalAccessException：拒绝访问一个类的时候，抛出该异常
		—— IOException及其子类：对文件或流的操作有误时，抛出异常
		—— CloneNotSupportedException：当调用 Object 类中的 clone 方法复制对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常

	* 运行时异常：

		—— ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例
			eg：一个数除以零
		—— ArrayIndexOutOfBoundsException：用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引
		—— ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常【多态】
		—— IlleaglArguementException：抛出的异常表明向方法传递了一个不合法或不正确的参数
		—— NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常
		—— NullPointerException：当应用程序试图在需要对象的地方使用 null 时，抛出该异常【即空指针异常】
			调用 null 对象的实例方法。 
			访问或修改 null 对象的字段。 
			将 null 作为一个数组，获得其长度。 
			将 null 作为一个数组，访问或修改其时间片。 
			将 null 作为 Throwable 值抛出。
		
